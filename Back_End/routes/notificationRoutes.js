const express = require('express');
const router = express.Router();
const FcmToken = require('../models/FcmToken');
const User = require('../models/User');
const Notification = require('../models/notification'); // ÿ•ÿ∂ÿßŸÅÿ© ŸÜŸÖŸàÿ∞ÿ¨ ÿßŸÑÿ•ÿ¥ÿπÿßÿ±ÿßÿ™
const admin = require('../firebase'); // ÿ£Ÿà ÿ≠ÿ≥ÿ® ÿßŸÑŸÖÿ≥ÿßÿ± ÿßŸÑÿµÿ≠Ÿäÿ≠ ŸÑŸÖŸÑŸÅ firebase.js

router.post('/send', async (req, res) => {
  const { content, target } = req.body;

  try {
    let tokens = [];

    // ÿ™ÿ≠ÿØŸäÿØ ŸÖŸÜ ÿ≥Ÿäÿ±ÿ≥ŸÑ ŸÑŸá ÿßŸÑÿ•ÿ¥ÿπÿßÿ±
    if (target === 'owners') {
      const owners = await User.find({ role: 'Owner' });
      const ownerIds = owners.map((o) => o._id.toString());

      const matchedTokens = await FcmToken.find({
        userId: { $in: ownerIds },
        token: { $nin: [null, ''] },
      });

      tokens = matchedTokens.map(t => t.token);
    } else {
      const allTokens = await FcmToken.find({ token: { $nin: [null, ''] } });
      tokens = allTokens.map(t => t.token);
    }

    // ÿ•ÿ∞ÿß ŸÑŸÖ ÿ™ŸÉŸÜ ŸáŸÜÿßŸÉ ÿ™ŸàŸÉŸÜÿßÿ™
    if (tokens.length === 0) {
      return res.status(400).json({ message: 'No tokens available' });
    }

    // ÿ±ÿ≥ÿßŸÑÿ© ÿßŸÑÿ•ÿ¥ÿπÿßÿ±
    const message = {
      notification: {
        title: 'üì¢ Cadeau Admin Message',
        body: content,
      }
    };

    // ÿ•ÿ±ÿ≥ÿßŸÑ ÿßŸÑÿ•ÿ¥ÿπÿßÿ± ŸÑŸÉŸÑ ÿ™ŸàŸÉŸÜ ÿ®ÿ¥ŸÉŸÑ ŸÅÿ±ÿØŸä
    let successCount = 0;
    let failureCount = 0;

    for (let token of tokens) {
      try {
        message.token = token; // ÿ•ÿ∂ÿßŸÅÿ© ÿßŸÑÿ™ŸàŸÉŸÜ ÿ•ŸÑŸâ ÿßŸÑÿ±ÿ≥ÿßŸÑÿ©
        const response = await admin.messaging().send(message);

        if (response.successCount === 1) {
          successCount++;
          
          // ÿ≠ŸÅÿ∏ ÿßŸÑÿ•ÿ¥ÿπÿßÿ± ŸÅŸä ŸÇÿßÿπÿØÿ© ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™ ÿ®ÿπÿØ ÿ•ÿ±ÿ≥ÿßŸÑŸá ÿ®ŸÜÿ¨ÿßÿ≠
          const user = await FcmToken.findOne({ token }); // ÿ•Ÿäÿ¨ÿßÿØ ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖ ÿ®ŸÜÿßÿ°Ÿã ÿπŸÑŸâ ÿßŸÑÿ™ŸàŸÉŸÜ
          if (user) {
            await Notification.create({
              userId: user.userId, // ÿ™ÿÆÿ≤ŸäŸÜ ŸÖÿπÿ±ŸÅ ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖ ÿßŸÑÿ∞Ÿä ÿßÿ≥ÿ™ŸÑŸÖ ÿßŸÑÿ•ÿ¥ÿπÿßÿ±
              content: content, // ÿ™ÿÆÿ≤ŸäŸÜ ŸÖÿ≠ÿ™ŸàŸâ ÿßŸÑÿ•ÿ¥ÿπÿßÿ±
              sentAt: new Date(), // ÿ™ÿÆÿ≤ŸäŸÜ ŸàŸÇÿ™ ÿßŸÑÿ•ÿ±ÿ≥ÿßŸÑ
              isSeen: false, // ÿ™ÿ≠ÿØŸäÿØ ÿ£ŸÜ ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖ ŸÑŸÖ Ÿäÿ¥ÿßŸáÿØ ÿßŸÑÿ•ÿ¥ÿπÿßÿ± ÿ®ÿπÿØ
            });
          }
        } else {
          failureCount++;
        }
      } catch (err) {
        failureCount++;
        console.error('‚ùå Error sending to token:', token, err.message);
      }
    }

    res.json({
      message: `‚úÖ Sent to ${successCount} devices, failed: ${failureCount}`,
    });

  } catch (err) {
    console.error('‚ùå Firebase send error:', err.message);
    res.status(500).json({ error: 'Failed to send notifications' });
  }
});
// ÿ™ÿ≠ÿØŸäÿ´ ÿ≠ÿßŸÑÿ© ÿßŸÑÿ•ÿ¥ÿπÿßÿ± ÿπŸÜÿØ ŸÖÿ¥ÿßŸáÿØÿ™Ÿá
router.post('/mark-as-seen', async (req, res) => {
  const { notificationId } = req.body;

  try {
    const notification = await Notification.findById(notificationId);
    if (!notification) {
      return res.status(404).json({ error: 'Notification not found' });
    }

    notification.isSeen = true; // ÿ™ÿ≠ÿØŸäÿ´ ÿ≠ÿßŸÑÿ© ÿßŸÑÿ•ÿ¥ÿπÿßÿ±
    await notification.save();

    res.json({ message: 'Notification marked as seen' });
  } catch (err) {
    console.error('‚ùå Error marking notification as seen:', err.message);
    res.status(500).json({ error: 'Failed to mark notification as seen' });
  }
});


module.exports = router;
